{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ssisadftest"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"BlobText_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BlobText'"
		},
		"CosmosDbemployee_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbemployee'"
		},
		"SourceAzureSqlDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SourceAzureSqlDB'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "siddharthreddyatla@gmail.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ControlPackage_Pip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetControlLogExecId",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "ExecID",
											"type": "Int64",
											"value": "0",
											"direction": "Output"
										}
									],
									"type": "Query",
									"text": "SELECT @ExecID=(ISNULL(MAX(ExecId),0)+1) FROM [Audit].[ControlLog]"
								}
							]
						}
					},
					{
						"name": "SetExecId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetControlLogExecId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExecId",
							"value": {
								"value": "@string(activity('GetControlLogExecId').output.outputParameters.ExecID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "InsertintoControlLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetExecId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ControlLogInsert]",
							"storedProcedureParameters": {
								"PName": {
									"value": "ControlPackage",
									"type": "String"
								},
								"StartTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Status": {
									"value": "Running",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteDimCurrency",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "InsertintoControlLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DImCurrency_Pip",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ParentId": {
									"value": "@variables('ExecId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "UpdateControlLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteDimCurrency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ControlLogUpdate]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PExecId": {
									"value": {
										"value": "@variables('ExecId')",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateControlLog_Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExecuteDimCurrency",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ControlLogUpdate]",
							"storedProcedureParameters": {
								"EndTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"PExecId": {
									"value": {
										"value": "@variables('ExecId')",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ExecId": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T23:53:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/DImCurrency_Pip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DImCurrency_Pip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertintoPackageLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetExecId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[PackageLogInsert]",
							"storedProcedureParameters": {
								"PExecID": {
									"value": {
										"value": "@pipeline().parameters.ParentId",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"PName": {
									"value": {
										"value": "@variables('PackageName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"StartTime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Status": {
									"value": "Running",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetControlLogExecId",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "ExecID",
											"type": "Int64",
											"value": null,
											"direction": "Output"
										}
									],
									"type": "Query",
									"text": "SELECT @ExecID=(ISNULL(MAX(ExecutionId),0)+1) FROM [Audit].[PackageLog]\n"
								}
							]
						}
					},
					{
						"name": "SetExecId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetControlLogExecId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "EexcId",
							"value": {
								"value": "@string(activity('GetControlLogExecId').output.outputParameters.ExecID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CheckForNewRecords",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "InsertintoPackageLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Declare @RC INT\nExec CheckForNewRecords 'Stg_Currency','Currency','CurrencyCode','Name,ModifiedDate',@RC output\nselect @RC as Flag",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LookUP",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckForNewRecords",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('CheckForNewRecords').output.firstRow.Flag,1)\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "updateintoPackageLog_False",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PackageLogUpdate]",
										"storedProcedureParameters": {
											"EndTime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Id": {
												"value": {
													"value": "@variables('EexcId')",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsInserted": {
												"value": "0",
												"type": "Int64"
											},
											"RowsUpdated": {
												"value": "0",
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Currency_DF",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DimCurrency_DF",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source": {},
												"AzureDFDB": {},
												"sink": {},
												"AzureDFDest": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "updateintoPackageLog",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Currency_DF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PackageLogUpdate]",
										"storedProcedureParameters": {
											"EndTime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Id": {
												"value": {
													"value": "@variables('EexcId')",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsInserted": {
												"value": {
													"value": "@int(activity('Currency_DF').output.runStatus.metrics.sink.stages[0].recordsRead)",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsUpdated": {
												"value": "0",
												"type": "Int64"
											},
											"Status": {
												"value": "Success",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "updateintoPackageLogOnFailure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Currency_DF",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[PackageLogUpdate]",
										"storedProcedureParameters": {
											"EndTime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Id": {
												"value": "",
												"type": "Int64"
											},
											"RowsInserted": {
												"value": "",
												"type": "Int64"
											},
											"RowsUpdated": {
												"value": "",
												"type": "Int64"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ParentId": {
						"type": "int",
						"defaultValue": 0
					}
				},
				"variables": {
					"PackageName": {
						"type": "String",
						"defaultValue": "DimCurrency"
					},
					"EexcId": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-10T23:53:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/LookUP')]",
				"[concat(variables('factoryId'), '/dataflows/DimCurrency_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgOnPremTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('TableList')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item())",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "On_PremDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Stage_Azure_Curr_Source",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"TableList": {
						"type": "Array",
						"defaultValue": [
							"[[Sales].[Currency]",
							"[[Person].[CountryRegion]"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-09T15:39:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/On_PremDB')]",
				"[concat(variables('factoryId'), '/datasets/Stage_Azure_Curr_Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CurrencyTable_Dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Currency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookUP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "nchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Currency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/On_PremDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "Sales",
					"table": "Currency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stage_Azure_Curr_DF_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CurrencyCode",
						"type": "nchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Stg_Currency"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stage_Azure_Curr_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@concat('Stg_',dataset().TableName)",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobText')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BlobText_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbemployee')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbemployee_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceAzureSqlDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SourceAzureSqlDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To Connect SQL server Online",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IRSQLServerOnPrem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRSQLServerOnPrem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRSQLServerOnPrem')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "To Connect SQL Server On-Premise",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCurrency_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Stage_Azure_Curr_DF_Source",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "CurrencyTable_Dest",
								"type": "DatasetReference"
							},
							"name": "AzureDFDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CurrencyTable_Dest",
								"type": "DatasetReference"
							},
							"name": "sink"
						},
						{
							"dataset": {
								"referenceName": "CurrencyTable_Dest",
								"type": "DatasetReference"
							},
							"name": "AzureDFDest"
						}
					],
					"transformations": [
						{
							"name": "DeriveHash"
						},
						{
							"name": "LookUp"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CurrencyCode as string,",
						"          Name as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source",
						"source(output(",
						"          CurrencyCode as string,",
						"          Name as string,",
						"          ModifiedDate as timestamp,",
						"          HashCombined as binary",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AzureDFDB",
						"source derive(Hash = toBinary(md5(Name)),",
						"          ModifiedDate = currentDate()) ~> DeriveHash",
						"DeriveHash, AzureDFDB lookup(source@CurrencyCode == AzureDFDB@CurrencyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUp",
						"LookUp split(isNull(AzureDFDB@CurrencyCode),",
						"     isNull(AzureDFDB@CurrencyCode)&& notEquals(HashCombined,Hash),",
						"     disjoint: true) ~> ConditionalSplit@(NewRecords, Update, NoUpdateInsert)",
						"ConditionalSplit@Update alterRow(updateIf(true())) ~> AlterRow",
						"ConditionalSplit@NewRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CurrencyCode = ConditionalSplit@NewRecords@CurrencyCode,",
						"          Name = ConditionalSplit@NewRecords@Name,",
						"          ModifiedDate = ConditionalSplit@NewRecords@ModifiedDate,",
						"          HashCombined = Hash",
						"     )) ~> sink",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CurrencyCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CurrencyCode = ConditionalSplit@Update@CurrencyCode,",
						"          Name = ConditionalSplit@Update@Name,",
						"          ModifiedDate = ConditionalSplit@Update@ModifiedDate,",
						"          HashCombined = Hash",
						"     )) ~> AzureDFDest"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Stage_Azure_Curr_DF_Source')]",
				"[concat(variables('factoryId'), '/datasets/CurrencyTable_Dest')]"
			]
		}
	]
}